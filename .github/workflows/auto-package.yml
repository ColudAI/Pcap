name: Build Executable and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      packages: write

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from commit
        id: get_version
        run: |
          echo "version=$(git describe --tags --always)" >> $GITHUB_OUTPUT

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: Create necessary directories
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            mkdir cache
            mkdir logs
          else
            mkdir -p cache logs
          fi

      - name: Clean build directory
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            if [ -d "build" ]; then rm -rf build; fi
            if [ -f "*.exe" ]; then rm -f *.exe; fi
            if [ -d "*.app" ]; then rm -rf *.app; fi
            if [ -f "*.so" ]; then rm -f *.so; fi
            if [ -f "*.dylib" ]; then rm -f *.dylib; fi
          else
            rm -rf build/
            rm -rf *.exe
            rm -rf *.app
            rm -rf *.so
            rm -rf *.dylib
          fi

      - name: Build Executable with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: main.py
          mode: app
          include-data-files: |
            ./files/template/load.html=files/template/load.html
          include-data-dir: |
            ./cache=cache
            ./logs=logs
          include-package: |
            Functions
            config
          enable-plugins: multiprocessing,tk-inter
          output-dir: dist
          disable-console: true
          macos-app-name: Pcap
          macos-app-mode: gui
          macos-app-icon: none
          macos-app-version: 1.0.0

      - name: Rename macOS app
        if: runner.os == 'macOS'
        shell: bash
        run: |
          if [ -d "dist/main.app" ]; then
            mv dist/main.app dist/Pcap.app
          fi

      - name: List build directory
        shell: bash
        run: |
          echo "Build directory contents:"
          ls -la dist/

      - name: Check build output
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            if [ ! -f "dist/main.exe" ]; then
              echo "Build failed: main.exe not found"
              exit 1
            fi
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            if [ ! -d "dist/Pcap.app" ]; then
              echo "Build failed: Pcap.app not found"
              echo "Current directory contents:"
              ls -la
              echo "dist directory contents:"
              ls -la dist/
              exit 1
            fi
          else
            if [ ! -f "dist/main.bin" ]; then
              echo "Build failed: main.bin not found"
              exit 1
            fi
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }} Build
          path: |
            dist/
          include-hidden-files: true

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/windows-latest Build/dist/main.exe
            artifacts/ubuntu-latest Build/dist/main.bin
            artifacts/macos-latest Build/dist/Pcap.app
          tag_name: ${{ needs.build.outputs.version }}
          name: Release ${{ needs.build.outputs.version }}
          body: |
            Automated release for ${{ needs.build.outputs.version }}
            
            Changes:
            - Built for all platforms
            - Optimized with Nuitka
            - Includes all necessary dependencies
          draft: false
          prerelease: false
          generate_release_notes: true
